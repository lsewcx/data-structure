#include<iostream>
#include<cstring>
using namespace std;
const int N=1e6+10;
int ne[N];
int la,lb;
char a[N],b[N];
int main()
{
    cin>>a+1;
    cin>>b+1;
    la=strlen(a+1);
    lb=strlen(b+1);
    //预处理next函数
    for(int i=2,j=0;i<=lb;i++)
    {
        while(j&&b[i]!=b[j+1])j=ne[j];
        if(b[i]==b[j+1])j++;
        ne[i]=j;
    }
    //匹配
    for(int i=1,j=0;i<=la;i++)
    {
        while(j&&a[i]!=b[j+1])j=ne[j];
        if(a[i]==b[j+1])j++;
        if(j==lb)printf("%d\n",i-lb+1);
    }
    for(int i=1;i<=lb;i++)
    {
        cout<<ne[i]<<" ";
    }
    return 0;
}

kmp算法当前缀和后缀相等时，直接移到后缀的位置加速匹配速度
总结：KMP中，next[ j ] 数组表示的是：以 j 结尾的数组里，前后缀的最长长度。
而 退一步的时候： j = next [ j ]，表示 j 更新为 j 长的数组中最长的 公共前后缀，就是y总说的“退一步”了
